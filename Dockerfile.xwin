# Dockerfile para compilación cruzada de C/C++ para Windows desde Linux
# Utiliza Clang/LLVM, CMake, xwin para el SDK de Windows, y Wine para pruebas.
FROM debian:bullseye-slim

ENV KEYRINGS=/usr/share/keyrings

# 1. Instalar prerrequisitos y configurar repositorios para Clang y Wine
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        gpg \
        tar; \
    curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor -o $KEYRINGS/llvm.gpg; \
    echo "deb [signed-by=$KEYRINGS/llvm.gpg] http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-15 main" > /etc/apt/sources.list.d/llvm.list; \
    dpkg --add-architecture i386; \
    curl -fsSL https://dl.winehq.org/wine-builds/winehq.key | gpg --dearmor -o $KEYRINGS/winehq.gpg; \
    echo "deb [signed-by=$KEYRINGS/winehq.gpg] https://dl.winehq.org/wine-builds/debian/ bullseye main" > /etc/apt/sources.list.d/winehq.list; \
    apt-get update

# 2. Instalar las herramientas de compilación y Wine
RUN set -eux; \
    apt-get install -y --no-install-recommends \
        clang-15 \
        llvm-15 \
        lld-15 \
        winehq-staging \
        cmake \
        make \
        git \
        pkg-config; \
    ln -s clang-15 /usr/bin/clang; \
    ln -s clang++-15 /usr/bin/clang++; \
    ln -s lld-15 /usr/bin/ld.lld; \
    ln -s clang-15 /usr/bin/clang-cl; \
    ln -s llvm-ar-15 /usr/bin/llvm-lib; \
    ln -s lld-link-15 /usr/bin/lld-link; \
    ln -s llvm-rc-15 /usr/bin/llvm-rc

# 3. Instalar xwin para obtener el SDK y CRT de Windows
RUN set -eux; \
    xwin_version="0.6.7"; \
    curl -fL "https://github.com/Jake-Shadle/xwin/releases/download/${xwin_version}/xwin-${xwin_version}-x86_64-unknown-linux-musl.tar.gz" \
    | tar -xz -C /usr/local/bin --strip-components=1; \
    xwin --accept-license splat --output /xwin

# 4. Crear el archivo de toolchain de CMake para la compilación cruzada
RUN mkdir -p /opt/toolchain && \
cat > /opt/toolchain/windows-clang.cmake << 'EOF'
set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_SYSTEM_PROCESSOR x86_64)
set(CMAKE_C_COMPILER clang-cl)
set(CMAKE_CXX_COMPILER clang-cl)
set(CMAKE_RC_COMPILER llvm-rc)
set(CMAKE_LINKER lld-link)
set(CMAKE_FIND_ROOT_PATH /xwin)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(FLAGS "/imsvc/xwin/crt/include /imsvc/xwin/sdk/include/ucrt /imsvc/xwin/sdk/include/um /imsvc/xwin/sdk/include/shared")
set(CMAKE_C_FLAGS_INIT "${FLAGS}")
set(CMAKE_CXX_FLAGS_INIT "${FLAGS}")
set(LINKER_FLAGS "/LIBPATH:/xwin/crt/lib/x86_64 /LIBPATH:/xwin/sdk/lib/um/x86_64 /LIBPATH:/xwin/sdk/lib/ucrt/x86_64")
set(CMAKE_EXE_LINKER_FLAGS_INIT "${LINKER_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "${LINKER_FLAGS}")
set(CMAKE_CROSSCOMPILING_EMULATOR "wine")
EOF

# 5. Configurar e inicializar Wine
ENV WINEDEBUG=-all
RUN wine wineboot --init

# 6. Script de ejemplo para construir un proyecto CMake
RUN mkdir -p /opt/scripts && \
cat > /opt/scripts/build-project.sh << 'EOF'
#!/bin/bash
set -e
PROJECT_DIR="${1:-.}"
BUILD_TYPE="${2:-Release}"
echo ">>> Configurando el proyecto CMake en $PROJECT_DIR"
echo ">>> Tipo de Build: $BUILD_TYPE"
cmake -S "$PROJECT_DIR" -B build-windows \
    -DCMAKE_TOOLCHAIN_FILE=/opt/toolchain/windows-clang.cmake \
    -DCMAKE_BUILD_TYPE="$BUILD_TYPE"
echo ">>> Compilando el proyecto..."
cmake --build build-windows --config "$BUILD_TYPE" -- -j$(nproc)
echo ">>> ¡Compilación completada!"
echo ">>> Ejecutables encontrados:"
find build-windows -name "*.exe" -type f -exec ls -lh {} \;
EOF
RUN chmod +x /opt/scripts/build-project.sh

# 7. Limpieza final para reducir el tamaño de la imagen
RUN set -eux; \
    # CORRECCIÓN: Se eliminó el comando `apt-get purge` que estaba rompiendo la imagen.
    # Solo limpiamos los cachés, que es seguro.
    rm -rf /var/lib/apt/lists/*; \
    rm /usr/local/bin/xwin; \
    rm -rf /root/.xwin-cache

# Directorio de trabajo por defecto
WORKDIR /workspace
CMD ["tail", "-f", "/dev/null"]