# Multi-stage Dockerfile for GitHub Actions Self-Hosted Runner with Windows Cross-Compilation
# Stage 1: Download and prepare runner
FROM --platform=$TARGETPLATFORM ubuntu:22.04 AS runner-base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV RUNNER_VERSION=2.327.1

# Use build arguments for platform detection
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Install base dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    unzip \
    tar \
    sudo \
    git \
    jq \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create runner user
RUN useradd -m -s /bin/bash runner && \
    usermod -aG sudo runner && \
    echo "runner ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Download and extract GitHub Actions Runner based on target platform
WORKDIR /home/runner
RUN echo "Target platform: $TARGETPLATFORM" && \
    case ${TARGETPLATFORM} in \
        linux/amd64) \
            RUNNER_ARCH=x64 \
            ;; \
        linux/arm64) \
            RUNNER_ARCH=arm64 \
            ;; \
        linux/arm/v7) \
            RUNNER_ARCH=arm \
            ;; \
        *) \
            echo "Unsupported platform: ${TARGETPLATFORM}" && \
            exit 1 \
            ;; \
    esac && \
    echo "Downloading runner for architecture: ${RUNNER_ARCH}" && \
    curl -o actions-runner-linux-${RUNNER_ARCH}-${RUNNER_VERSION}.tar.gz -L \
        https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${RUNNER_ARCH}-${RUNNER_VERSION}.tar.gz && \
    tar xzf ./actions-runner-linux-${RUNNER_ARCH}-${RUNNER_VERSION}.tar.gz && \
    rm actions-runner-linux-${RUNNER_ARCH}-${RUNNER_VERSION}.tar.gz

# Stage 2: Final image with Python and Windows cross-compilation tools
FROM --platform=$TARGETPLATFORM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# GitHub Actions Runner configuration environment variables
ENV GITHUB_URL=""
ENV RUNNER_NAME=""
ENV RUNNER_LABELS=""
ENV RUNNER_GROUP=""
ENV RUNNER_WORK_DIR="_work"

# Windows cross-compilation environment variables
ENV CC=x86_64-w64-mingw32-gcc
ENV CXX=x86_64-w64-mingw32-g++
ENV AR=x86_64-w64-mingw32-ar
ENV STRIP=x86_64-w64-mingw32-strip
ENV PKG_CONFIG_PATH=/usr/x86_64-w64-mingw32/lib/pkgconfig
ENV CROSS_TRIPLE=x86_64-w64-mingw32

# Install system dependencies including Python and Windows cross-compilation tools
RUN apt-get update && apt-get install -y \
    # Base system tools
    curl \
    wget \
    unzip \
    tar \
    sudo \
    git \
    jq \
    ca-certificates \
    software-properties-common \
    apt-transport-https \
    gnupg \
    lsb-release \
    # Python and development tools
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    python3-setuptools \
    python3-wheel \
    # Build tools and dependencies for native compilation
    build-essential \
    gcc \
    g++ \
    make \
    cmake \
    pkg-config \
    autotools-dev \
    automake \
    autoconf \
    libtool \
    # Windows cross-compilation toolchain
    mingw-w64 \
    mingw-w64-tools \
    mingw-w64-common \
    gcc-mingw-w64 \
    g++-mingw-w64 \
    # Wine for testing Windows executables (optional)
    wine \
    wine64 \
    # Additional cross-compilation libraries
    libz-mingw-w64-dev \
    # Dependencies for numpy, pandas, matplotlib (native)
    libopenblas-dev \
    liblapack-dev \
    gfortran \
    libfreetype6-dev \
    libpng-dev \
    libjpeg-dev \
    libffi-dev \
    libssl-dev \
    # Additional useful tools
    vim \
    nano \
    htop \
    tree \
    zip \
    unzip \
    # Node.js (often needed for GitHub Actions)
    nodejs \
    npm \
    # Docker CLI (for Docker-in-Docker scenarios)
    docker.io \
    && rm -rf /var/lib/apt/lists/*

# Install GitHub CLI - Alternative method for better ARM64 compatibility
RUN apt-get update && apt-get install -y wget gpg \
    && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor > /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" > /etc/apt/sources.list.d/github-cli.list \
    && apt-get update --allow-insecure-repositories \
    && apt-get install -y --allow-unauthenticated gh \
    && rm -rf /var/lib/apt/lists/*

# Create symbolic link for python command
RUN ln -s /usr/bin/python3 /usr/bin/python

# Upgrade pip only - packages will be installed in workflows as needed
RUN python3 -m pip install --upgrade pip setuptools wheel

# Install cross-compilation CMake toolchain
RUN mkdir -p /opt/toolchain
COPY --chown=root:root <<EOF /opt/toolchain/mingw-w64-x86_64.cmake
set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_SYSTEM_PROCESSOR x86_64)

set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)
set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)
set(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)

set(CMAKE_FIND_ROOT_PATH /usr/x86_64-w64-mingw32)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

set(CMAKE_C_FLAGS "-static-libgcc")
set(CMAKE_CXX_FLAGS "-static-libgcc -static-libstdc++")
EOF

# Create runner user
RUN useradd -m -s /bin/bash runner && \
    usermod -aG sudo runner && \
    usermod -aG docker runner && \
    echo "runner ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Copy runner files from previous stage
COPY --from=runner-base --chown=runner:runner /home/runner /home/runner

# Switch to runner user
USER runner
WORKDIR /home/runner

# Install runner dependencies
RUN sudo ./bin/installdependencies.sh

# Copy and setup entrypoint script
COPY --chown=runner:runner entrypoint.sh /home/runner/entrypoint.sh
RUN chmod +x /home/runner/entrypoint.sh

# Create helper scripts for cross-compilation
RUN mkdir -p /home/runner/scripts

# Create Windows build helper script
COPY --chown=runner:runner <<EOF /home/runner/scripts/build-windows.sh
#!/bin/bash
# Helper script for building Windows executables

set -e

PROJECT_DIR=\${1:-.}
BUILD_TYPE=\${2:-Release}

echo "Building Windows executable from: \$PROJECT_DIR"
echo "Build type: \$BUILD_TYPE"

cd "\$PROJECT_DIR"

# Create build directory
mkdir -p build-windows
cd build-windows

# Configure with CMake for Windows cross-compilation
cmake .. \
    -DCMAKE_TOOLCHAIN_FILE=/opt/toolchain/mingw-w64-x86_64.cmake \
    -DCMAKE_BUILD_TYPE=\$BUILD_TYPE \
    -DCMAKE_INSTALL_PREFIX=/home/runner/windows-dist

# Build
make -j\$(nproc)

echo "Windows executable built successfully!"
echo "Output files:"
find . -name "*.exe" -type f
EOF

RUN chmod +x /home/runner/scripts/build-windows.sh

# Set entrypoint
CMD ["/bin/bash"]
