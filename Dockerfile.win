
# Dockerfile for Windows Cross-Compilation using MSYS2
FROM ghcr.io/msys2/msys2-docker-experimental

# Install base packages and development tools
RUN pacman -Syu --noconfirm && \
    pacman -S --noconfirm --needed \
    git \
    base-devel \
    mingw-w64-x86_64-toolchain \
    mingw-w64-x86_64-cmake \
    mingw-w64-x86_64-ninja \
    mingw-w64-x86_64-pkg-config \
    mingw-w64-x86_64-gcc \
    mingw-w64-x86_64-gdb \
    vim \
    nano \
    wget \
    curl \
    && pacman -Scc --noconfirm

# Set Windows compilation environment variables for MSYS2
ENV MSYSTEM=MINGW64
ENV PATH="/mingw64/bin:/usr/local/bin:/usr/bin:/bin"
ENV CC=gcc
ENV CXX=g++
ENV PKG_CONFIG_PATH="/mingw64/lib/pkgconfig"

# Create build helper script directory
RUN mkdir -p /opt/scripts

# Create MSYS2 build helper script
RUN cat > /opt/scripts/build-windows.sh << 'SCRIPT_EOF'
#!/bin/bash
# MSYS2 Windows build script

set -e

PROJECT_DIR="${1:-.}"
BUILD_TYPE="${2:-Release}"
BUILD_DIR="${3:-build-windows}"

echo "========================================="
echo "MSYS2 Windows Build Script"
echo "========================================="
echo "Project Directory: $PROJECT_DIR"
echo "Build Type: $BUILD_TYPE"
echo "Build Directory: $BUILD_DIR"
echo ""

# Check if project directory exists
if [ ! -d "$PROJECT_DIR" ]; then
    echo "Error: Project directory '$PROJECT_DIR' does not exist"
    exit 1
fi

cd "$PROJECT_DIR"

# Check for CMakeLists.txt
if [ ! -f "CMakeLists.txt" ]; then
    echo "Error: CMakeLists.txt not found in $PROJECT_DIR"
    exit 1
fi

# Clean build directory if requested
if [ "$4" == "clean" ]; then
    echo "Cleaning build directory..."
    rm -rf "$BUILD_DIR"
fi

# Create build directory
mkdir -p "$BUILD_DIR"
cd "$BUILD_DIR"

# Configure with CMake for Windows using MSYS2
echo "Configuring with CMake..."
cmake .. \
    -G "MSYS Makefiles" \
    -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
    -DCMAKE_INSTALL_PREFIX=_install

# Build
echo "Building..."
make -j$(nproc)

echo ""
echo "========================================="
echo "Build completed successfully!"
echo "========================================="
echo "Output files:"
find . -name "*.exe" -type f -exec ls -lh {} \;
find . -name "*.dll" -type f -exec ls -lh {} \;
SCRIPT_EOF

# Make build script executable
RUN chmod +x /opt/scripts/build-windows.sh

# Create MSYS2 test script
RUN cat > /opt/scripts/test-toolchain.sh << 'TEST_EOF'
#!/bin/bash
# Test MSYS2 toolchain

echo "Testing MSYS2 MinGW-w64 toolchain..."
echo ""

# Test C compiler
echo "C Compiler version:"
gcc --version | head -n 1

# Test C++ compiler  
echo ""
echo "C++ Compiler version:"
g++ --version | head -n 1

# Test CMake
echo ""
echo "CMake version:"
cmake --version | head -n 1

# Create a simple test program
cat > /tmp/test.c << 'CODE_EOF'
#include <stdio.h>
#include <windows.h>

int main() {
    printf("Hello from Windows executable!\n");
    printf("Compiled with MSYS2 MinGW-w64\n");
    return 0;
}
CODE_EOF

echo ""
echo "Compiling test program..."
gcc -static -o /tmp/test.exe /tmp/test.c

if [ -f /tmp/test.exe ]; then
    echo "✓ Test executable created successfully"
    echo "  Size: $(ls -lh /tmp/test.exe | awk '{print $5}')"
    echo "  Type: $(file /tmp/test.exe | cut -d: -f2)"
    echo ""
    echo "Running test executable:"
    /tmp/test.exe
else
    echo "✗ Failed to create test executable"
fi

rm -f /tmp/test.c /tmp/test.exe
TEST_EOF

RUN chmod +x /opt/scripts/test-toolchain.sh

# Create usage instructions
RUN cat > /opt/USAGE.md << 'USAGE_EOF'
# MSYS2 Windows Compilation Docker Container

This container provides MSYS2 environment for compiling native Windows applications.

## Quick Start

### 1. Build a CMake project for Windows:
```bash
/opt/scripts/build-windows.sh /path/to/project Release
```

### 2. Manual compilation:
```bash
# For a C program
gcc -static -o program.exe program.c

# For a C++ program  
g++ -static -o program.exe program.cpp

# Using CMake manually
mkdir build && cd build
cmake .. -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release
make
```

### 3. Test the toolchain:
```bash
/opt/scripts/test-toolchain.sh
```

## Environment Variables

- MSYSTEM: MINGW64
- CC: gcc
- CXX: g++
- PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin

## Available Tools

- MSYS2 MinGW-w64 GCC/G++ compilers
- CMake with MSYS Makefiles generator
- Native Windows executable generation
- Build helper scripts

## Notes

- This uses MSYS2 native Windows compilation (not cross-compilation)
- Executables are native Windows PE format
- No Wine needed - executables run directly in Windows environment
- The toolchain targets 64-bit Windows (x86_64)
USAGE_EOF

# Set working directory
WORKDIR /workspace

# Keep container running without executing anything
CMD ["tail", "-f", "/dev/null"]
