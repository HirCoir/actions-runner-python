# Simple Windows Cross-Compilation Container (No GitHub Actions Runner)
FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive

# Install Windows cross-compilation tools
RUN apt-get update && apt-get install -y \
    # Build tools
    build-essential \
    gcc \
    g++ \
    make \
    cmake \
    pkg-config \
    git \
    wget \
    curl \
    unzip \
    # Windows cross-compilation toolchain
    mingw-w64 \
    mingw-w64-tools \
    mingw-w64-common \
    gcc-mingw-w64-x86-64 \
    g++-mingw-w64-x86-64 \
    # Wine for testing (optional)
    wine \
    wine64 \
    # Additional libraries
    libz-mingw-w64-dev \
    # Basic tools
    vim \
    nano \
    && rm -rf /var/lib/apt/lists/*

# Set Windows cross-compilation environment variables
ENV CC=x86_64-w64-mingw32-gcc
ENV CXX=x86_64-w64-mingw32-g++
ENV AR=x86_64-w64-mingw32-ar
ENV STRIP=x86_64-w64-mingw32-strip
ENV PKG_CONFIG_PATH=/usr/x86_64-w64-mingw32/lib/pkgconfig

# Create CMake toolchain file
RUN mkdir -p /opt/toolchain && \
cat > /opt/toolchain/mingw-w64.cmake << 'EOF'
set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_SYSTEM_PROCESSOR x86_64)

set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)
set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)
set(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)

set(CMAKE_FIND_ROOT_PATH /usr/x86_64-w64-mingw32)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

set(CMAKE_C_FLAGS "-static-libgcc")
set(CMAKE_CXX_FLAGS "-static-libgcc -static-libstdc++")
EOF

# Create simple build script
RUN mkdir -p /opt/scripts && \
cat > /opt/scripts/build-windows.sh << 'EOF'
#!/bin/bash
set -e

PROJECT_DIR="${1:-.}"
BUILD_TYPE="${2:-Release}"

echo "Building Windows executable..."
echo "Project: $PROJECT_DIR"
echo "Build Type: $BUILD_TYPE"

cd "$PROJECT_DIR"

# Clean and create build directory
rm -rf build-windows
mkdir build-windows
cd build-windows

# Configure with CMake
cmake .. \
    -DCMAKE_TOOLCHAIN_FILE=/opt/toolchain/mingw-w64.cmake \
    -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
    -DCMAKE_INSTALL_PREFIX=_install

# Build
make -j$(nproc)

echo "Build completed!"
find . -name "*.exe" -type f -exec ls -lh {} \;
EOF

RUN chmod +x /opt/scripts/build-windows.sh

# Create test script
RUN cat > /opt/scripts/test.sh << 'EOF'
#!/bin/bash
echo "Testing MinGW-w64 toolchain..."

# Test C compiler
echo "C Compiler:"
x86_64-w64-mingw32-gcc --version | head -n 1

# Test C++ compiler
echo "C++ Compiler:"
x86_64-w64-mingw32-g++ --version | head -n 1

# Create test program
cat > /tmp/test.c << 'CODE'
#include <stdio.h>
#include <windows.h>

int main() {
    printf("Hello from Windows!\n");
    return 0;
}
CODE

echo "Compiling test..."
x86_64-w64-mingw32-gcc -static -o /tmp/test.exe /tmp/test.c

if [ -f /tmp/test.exe ]; then
    echo "✓ Test executable created"
    ls -lh /tmp/test.exe
    file /tmp/test.exe
    
    if command -v wine64 &> /dev/null; then
        echo "Running with Wine:"
        wine64 /tmp/test.exe
    fi
else
    echo "✗ Failed to create executable"
fi

rm -f /tmp/test.c /tmp/test.exe
EOF

RUN chmod +x /opt/scripts/test.sh

# Set working directory
WORKDIR /workspace

# Keep container running
CMD ["tail", "-f", "/dev/null"]
